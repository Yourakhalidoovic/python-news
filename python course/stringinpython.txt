To revise or update strings in Python, you can use a variety of methods depending on what you want to accomplish. Here are some common techniques:

### 1. **String Replacement**

Use the `str.replace()` method to replace substrings within a string.

```python
text = "Hello, world!"
new_text = text.replace("world", "Python")
print(new_text)  # Output: Hello, Python!
```

### 2. **String Formatting**

You can use f-strings (Python 3.6+) or the `format()` method to create strings with variables.

```python
name = "Alice"
age = 30
formatted_string = f"My name is {name} and I am {age} years old."
print(formatted_string)  # Output: My name is Alice and I am 30 years old.
```

### 3. **String Concatenation**

Use the `+` operator to concatenate strings.

```python
part1 = "Hello, "
part2 = "world!"
combined = part1 + part2
print(combined)  # Output: Hello, world!
```

### 4. **String Slicing**

Extract substrings using slicing.

```python
text = "Hello, world!"
substring = text[7:12]  # Extracts "world"
print(substring)  # Output: world
```

### 5. **Trimming Whitespaces**

Use `str.strip()`, `str.lstrip()`, or `str.rstrip()` to remove leading and trailing whitespace.

```python
text = "   Hello, world!   "
cleaned_text = text.strip()
print(cleaned_text)  # Output: Hello, world!
```

### 6. **Splitting and Joining**

Use `str.split()` to split a string into a list and `str.join()` to join a list into a string.

```python
text = "one,two,three"
parts = text.split(",")  # Splits into ['one', 'two', 'three']
print(parts)

joined_text = "-".join(parts)  # Joins into "one-two-three"
print(joined_text)
```

These methods provide various ways to revise and manipulate strings according to your needs.